@rendermode InteractiveServer
@using Lab5prime.Services
@using Lab5prime.Models
@page "/users"
@inject ILibraryService LibraryService
@inject IJSRuntime JSRuntime
<h3>Users</h3>

<div class="mb-3">
    <button class="btn btn-success" @onclick="AddNewUser">Add New User</button>
</div>

@if (users == null)
{
    <p>Loading...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Email</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => EditUser(user)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(user.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@if (showAddEditForm)
{
    <div class="modal" tabindex="-1" style="display:block" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">@(editingUser == null ? "Add New User" : "Edit User")</h5>
                    <button type="button" class="close" @onclick="CloseAddEditForm">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <EditForm Model="@currentUser" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="form-group">
                            <label for="name">Name:</label>
                            <InputText id="name" @bind-Value="currentUser.Name" class="form-control" />
                            <ValidationMessage For="@(() => currentUser.Name)" />
                        </div>
                        <div class="form-group">
                            <label for="email">Email:</label>
                            <InputText id="email" @bind-Value="currentUser.Email" class="form-control" />
                            <ValidationMessage For="@(() => currentUser.Email)" />
                        </div>

                        <button type="submit" class="btn btn-primary">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<User> users;
    private bool showAddEditForm = false;
    private User currentUser = new User();
    private User editingUser;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        users = await LibraryService.GetUsersAsync();
    }

    private void AddNewUser()
    {
        showAddEditForm = true;
        currentUser = new User();
        editingUser = null;
    }

    private void EditUser(User user)
    {
        showAddEditForm = true;
        currentUser = new User
            {
                Id = user.Id,
                Name = user.Name,
                Email = user.Email
            };
        editingUser = user;
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this user?");
        if (confirmed)
        {
            await DeleteUser(id);
        }
    }

    private async Task DeleteUser(int id)
    {
        try
        {
            await LibraryService.DeleteUserAsync(id);
            await LoadUsers();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user: {ex.Message}");
        }
    }

    private void CloseAddEditForm()
    {
        showAddEditForm = false;
        currentUser = new User();
        editingUser = null;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (editingUser == null)
            {
                await LibraryService.AddUserAsync(currentUser);
            }
            else
            {
                await LibraryService.EditUserAsync(currentUser);
            }

            CloseAddEditForm();
            await LoadUsers();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error saving user: {ex.Message}");
        }
    }
}